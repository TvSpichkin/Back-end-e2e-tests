import запрос = require("supertest"); // костыль от "can only be default-imported using the 'esModuleInterop' flag"
import {пр, ПутиМарш} from "../../ист/прил";
import {связьТестУправ} from "../полезн/связьТестУправ";
import {создИссл, исслТестУправ} from "../полезн/исслТестУправ";
import {создЧаст, частТестУправ} from "../полезн/частТестУправ";
import {МодСоздСвязи} from "../../ист/особенности/связьИсслЧаст/модели/МодСоздСвязи";
import {МодОбновИссл} from "../../ист/особенности/исследователи/модели/МодОбновИссл";

describe("/связьИсслЧаст", () => {
    function создИссл(ид: number, имя: string) {
        if(ид) return {ид: ид, имя: имя};
        else return {имя: имя};
    }

    const э = "Ландау",
        п = "Лифшиц",
        ф = "Иродов",
        чэ = создИссл(1, э),
        чп = создИссл(1, п),
        чф = создИссл(2, ф),
        Путь = decodeURI(ПутиМарш.исследователи);
    
    beforeAll(async () => {
        await запрос(пр).delete("/__тест__/данные");
    });
    
    /*it("должен вернуть 200 и пустой массив", async () => {
        await запрос(пр).get(Путь).expect(200, []);
    });

    it("должен вернуть 404 для несуществующей сущности", async () => {
        await запрос(пр).get(Путь + "/0").expect(404);
    });

    it("не должен создать сущность c неправильными входными данными", async () => {
        var сущн: МодСоздСвязи = создИссл(0, "    ");
        
        await запрос(пр).post(Путь).expect(400);
        await запрос(пр).post(Путь).send().expect(400);
        await запрос(пр).post(Путь).send({имя: 0}).expect(400);
        await связьТестУправ.добСвязь(сущн, 400);

        await запрос(пр).get(Путь).expect(200, []);
    });*/

    it("должен создать сущности c правильными входными данными", async () => {
        await исслТестУправ.добИссл(создИссл(0, "Ландау"));
        await частТестУправ.добЧаст(создЧаст(0, "Электрон"));

        var сущн: МодСоздСвязи = {идИссл: 1, идЧаст: 1};

        await связьТестУправ.добСвязь(сущн);
        //сущн = создИссл(0, ф);
        //await связьТестУправ.добСвязь(сущн);

        //await запрос(пр).get(Путь).expect(200, []);
    });

    /*it("должен вернуть 200 и созданные сущности", async () => {
        await запрос(пр).get(Путь + "/1").expect(200, чп);
        await запрос(пр).get(Путь + "/2").expect(200, чф);
    });

    it("не должен обновить сущность c неправильными входными данными", async () => {
        await запрос(пр).put(Путь + "/1").expect(400);
        await запрос(пр).get(Путь + "/1").expect(200, чп);

        await запрос(пр).put(Путь + "/1").send().expect(400);
        await запрос(пр).get(Путь + "/1").expect(200, чп);

        await запрос(пр).put(Путь + "/1").send({имя: 0}).expect(400);
        await запрос(пр).get(Путь + "/1").expect(200, чп);

        await запрос(пр).put(Путь + "/1").send({имя: "    "}).expect(400);
        await запрос(пр).get(Путь + "/1").expect(200, чп);
    });

    it("не должен обновить несуществующую сущность", async () => {
        const сущн: МодОбновИссл = создИссл(0, э);
        await запрос(пр).put(Путь + "/0").send(сущн).expect(404);
    });

    it("должен обновить сущность c правильными входными данными", async () => {
        const сущн: МодОбновИссл = создИссл(0, э);
        await запрос(пр).put(Путь + "/1").send(сущн).expect(204);
        await запрос(пр).get(Путь + "/1").expect(200, чэ);
        await запрос(пр).get(Путь + "/2").expect(200, чф);
    });

    it("не должен удалить несуществующую сущность", async () => {
        await запрос(пр).delete(Путь + "/0").expect(404);
    });

    it("должен удалить существующие сущности", async () => {
        await запрос(пр).delete(Путь + "/1").expect(204);
        await запрос(пр).delete(Путь + "/2").expect(204);

        await запрос(пр).get(Путь).expect(200, []);
    });*/
});
